// This file was generated by Slater.app - vetvision-main.js 

// Split text into words
let typeSplit = new SplitType('[animate]', {
  types: 'words',
  tagName: 'span'
});

let tl = gsap.timeline({ delay: 0.5 }); // Delay animation start by 0.5 seconds

// Initial fade-in animation for elements with [animate] attribute
tl.from('[animate] .word', {
    opacity: 0,
    duration: 1,
    ease: 'power1.out',
    stagger: 0.1
  })
  .to('[animate] .word', {
    backgroundImage: 'linear-gradient(41.89deg, #ff007b 7.89%, #9339f3 97.13%)',
    duration: 1,
    ease: 'power1.inOut',
    stagger: 0.1
  }, 0.1)
  .to('[animate] .word', {
    backgroundImage: 'var(--gradient)',
    duration: 1,
    ease: 'power1.out',
    stagger: 0.1
  }, "-=0.5");

// Split text into words for all animate-section elements
let typeSplit2 = new SplitType('[animate-section]', {
  types: 'words',
  tagName: 'span'
});

// IntersectionObserver to trigger animations on entering and resetting on exiting the viewport
let observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    let element = entry.target;
    if (entry.isIntersecting) {
      // Animate when entering viewport with similar settings as [animate]
      let tl = gsap.timeline({ 
        repeat: 0, // Play once
        onComplete: () => observer.observe(element) // Ensure element is observed for next entry
      });

      tl.fromTo(element.querySelectorAll('.word'), 
        { opacity: 0 }, // Start from opacity 0
        { 
          opacity: 1,
          backgroundImage: 'linear-gradient(41.89deg, #ff007b 7.89%, #9339f3 97.13%)',
          duration: 1, // Match duration with [animate]
          ease: 'power1.inOut',
          stagger: 0.1 // Match stagger with [animate]
        })
        .to(element.querySelectorAll('.word'), {
          backgroundImage: 'var(--gradient)',
          duration: 1, // Match duration with [animate]
          ease: 'power1.inOut',
          stagger: 0.1 // Match stagger with [animate]
        });
    } else {
      // Reset animation when exiting viewport
      gsap.set(element.querySelectorAll('.word'), { opacity: 0 }); // Reset opacity to 0 on exit
    }
  });
}, { threshold: 0.5 });

// Apply the observer to each animate-section element
document.querySelectorAll('[animate-section]').forEach(element => {
  observer.observe(element);
});
